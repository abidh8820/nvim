priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

snippet t--
int t;
cin >> t;

while(t--){
	${0}
}
endsnippet

snippet combi
LL fac[N], invfac[N];

void pre() {
	fac[0] = 1;
	for (int i = 1; i < N; i++) fac[i] = (fac[i - 1] * i) % M;
	invfac[N - 1] = BM(fac[N - 1], M - 2);
	for (int i = N - 2; i >= 0; i--) invfac[i] = (invfac[i + 1] * (i + 1)) % M;
}
endsnippet

snippet bm
LL BM(LL a, LL p) {
	if (p == 0) return 1;
	if (p == 1) return a;
	if (p & 1) return (a * BM(a, p - 1)) % M;
	LL f = BM(a, p / 2);
	return (f * f) % M;
}
endsnippet

snippet mod
const int M = 1e9 + 7;
endsnippet

snippet maxn
const int N = 1e${1:6}+7;
endsnippet

snippet LL
typedef long long LL;
endsnippet

snippet matexpo
struct Mat {
	long long a[2][2] = {{0, 0}, {0, 0}};
	Mat operator*(const Mat& other) {
		Mat res;
		for (int i = 0; i < 2; i++)
			for (int j = 0; j < 2; j++)
				for (int k = 0; k < 2; k++) {
					res.a[i][k] = (res.a[i][k] + (a[i][j] * other.a[j][k]))%M;
			}
		return res;
	}
};

Mat bm(Mat a, long long p) {
	if (p == 1) return a;
	if (p & 1) return a * (bm(a, p - 1));
	Mat tepm = bm(a, p / 2);
	return (tepm * tepm);
}
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
# vim:ft=snippets:
